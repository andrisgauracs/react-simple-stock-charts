{"version":3,"sources":["demoData/AMZN/intraday.csv","demoData/AMZN/weekly.csv","demoData/AMZN/monthly.csv","demoData/AAPL/intraday.csv","demoData/AAPL/weekly.csv","demoData/AAPL/monthly.csv","demoData/FB/intraday.csv","demoData/FB/weekly.csv","demoData/FB/monthly.csv","demoData/MSFT/intraday.csv","demoData/MSFT/weekly.csv","demoData/MSFT/monthly.csv","demoData/TSLA/intraday.csv","demoData/TSLA/weekly.csv","demoData/TSLA/monthly.csv","components/Layout/Layout.tsx","config.ts","demoData/demoData.ts","models/TimePeriod.ts","api/alphaVantage/endpoints.ts","api/financialModelingPrep/endpoints.ts","components/context/StockChartReducer.tsx","service/StockService/StockService.ts","components/context/StockChartContext.tsx","components/StyledChart/StyledChart.tsx","components/StockChart/StockChart.tsx","components/MaterialThemeProvider/MaterialThemeProvider.tsx","components/StockTimePeriodToggler/StockTimePeriodToggler.tsx","components/Stock/Stock.tsx","mappers/SymbolDataDtoMapper.ts","components/SymbolSearchBar/SymbolSearchBar.tsx","hooks/useDebounce.ts","App.tsx","reportWebVitals.js","index.tsx"],"names":["StyledLayout","styled","div","ALPHA_VANTAGE_API_KEY","sleep","delay","Promise","resolve","setTimeout","demoData","DataTimePeriod","DisplayTimePeriod","AMZN","TIME_SERIES_INTRADAY_EXTENDED","require","TIME_SERIES_WEEKLY","TIME_SERIES_MONTHLY","AAPL","FB","MSFT","TSLA","functionType","Types","callFunction","DAY","WEEK","MONTH","ONE_YEAR","FIVE_YEARS","MAX","parseCsvResults","results","parsedData","csvData","data","slice","filter","e","length","isNaN","map","row","date","open","parseFloat","high","low","close","volume","fetchCsv","url","a","fetch","then","response","reader","body","getReader","decoder","TextDecoder","read","result","decode","value","getStockDataBySymbol","symbol","time","basicCallParams","function","currentFunctionType","datatype","apikey","intradayParams","interval","rawCsv","default","localCsvData","Papa","parse","download","delimiter","complete","reverse","console","warn","getStockSymbol","query","demoSymbols","undefined","stockChartContextReducer","state","action","type","SetStock","stockInfo","payload","monthlyChartData","weeklyChartData","intraDayChartData","timePeriod","SetTimePeriod","SetIntraDayChartData","SetWeeklyChartData","SetMonthlyChartData","defaultState","StockChartContext","React","createContext","StockDispatchContext","useStockChartState","context","useContext","Error","useStockChartDispatch","StockChartContextProvider","children","useReducer","dispatch","Provider","StyledChart","monthsShort","StockChart","stockChart","timeFrame","width","height","baseValue","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","strokeDasharray","opacity","contentStyle","background","borderColor","labelStyle","color","formatter","dataKey","tickFormatter","dayJsValue","dayjs","format","month","allowDuplicatedCategory","minTickGap","tickSize","tickMargin","orientation","toFixed","domain","dataMin","dataMax","strokeWidth","stroke","fill","theme","createMuiTheme","palette","primary","main","lightBlue","MaterialThemeProvider","ThemeProvider","useStyles","makeStyles","root","padding","marginRight","StockTimePeriodToggler","classes","ToggleButtonGroup","className","exclusive","onChange","_event","newTimePeriod","Object","values","i","ToggleButton","StockLayout","NoResultsFound","StockHeader","StockInfo","referenceDate","Date","toDate","today","week","subtract","year","five_years","Stock","useState","loading","setLoading","currenChartSettings","useMemo","chartData","targetDate","currentSettings","useEffect","stockData","typeForDispatch","getStockData","name","exchange","currency","CircularProgress","getDate","mapSymbolDataToStockInfo","exchangeShortName","SymbolSearchBarWrapper","overflow","maxHeight","position","zIndex","borderBottomLeftRadius","borderBottomRightRadius","fontSize","SymbolSearchBar","searchTerm","setSearchTerm","setResults","isSearching","setIsSearching","debouncedSearchTerm","debouncedValue","setDebouncedValue","handler","clearTimeout","useDebounce","searchSymbols","TextField","label","fullWidth","placeholder","variant","target","InputLabelProps","shrink","InputProps","endAdornment","size","List","component","ListItem","button","onClick","newSymbol","ListItemText","secondary","GlobalStyle","createGlobalStyle","DemoDisclaimer","span","App","Layout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11107f44.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/intraday.7de02c28.csv\";","export default __webpack_public_path__ + \"static/media/weekly.f70e9246.csv\";","export default __webpack_public_path__ + \"static/media/monthly.f3469836.csv\";","export default __webpack_public_path__ + \"static/media/intraday.694c933f.csv\";","export default __webpack_public_path__ + \"static/media/weekly.e55d8e50.csv\";","export default __webpack_public_path__ + \"static/media/monthly.6e62e12c.csv\";","export default __webpack_public_path__ + \"static/media/intraday.f41bb7f6.csv\";","export default __webpack_public_path__ + \"static/media/weekly.7542704a.csv\";","export default __webpack_public_path__ + \"static/media/monthly.46cbb855.csv\";","export default __webpack_public_path__ + \"static/media/intraday.88acc649.csv\";","export default __webpack_public_path__ + \"static/media/weekly.e7e150b2.csv\";","export default __webpack_public_path__ + \"static/media/monthly.b64ca9a9.csv\";","export default __webpack_public_path__ + \"static/media/intraday.d1e08ec8.csv\";","export default __webpack_public_path__ + \"static/media/weekly.0d62423e.csv\";","export default __webpack_public_path__ + \"static/media/monthly.6b93c953.csv\";","import styled from \"styled-components\";\n\nconst StyledLayout = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  padding: 3rem;\n`;\n\nexport default StyledLayout;\n","/**\n * Get an API KEY from https://www.alphavantage.co\n * This API is used to retrieve infraday, weekly and monthly stock charts\n **/\nexport const ALPHA_VANTAGE_API_KEY = \"{YOUR_API_KEY}\";\n\n/**\n * Get an API KEY from https://financialmodelingprep.com/developer\n * This API is used to retrieve basic information about stock symbols\n **/\nexport const FINANCIAL_MODELING_PREP_API_KEY = \"{YOUR_API_KEY}\";\n\n// If no API keys are provided, the app will run in demo mode\nexport const usingFakeData =\n  ALPHA_VANTAGE_API_KEY === \"{YOUR_API_KEY}\" ||\n  FINANCIAL_MODELING_PREP_API_KEY === \"{YOUR_API_KEY}\";\n","const demoData = {\n  AMZN: {\n    TIME_SERIES_INTRADAY_EXTENDED: require(\"./AMZN/intraday.csv\"),\n    TIME_SERIES_WEEKLY: require(\"./AMZN/weekly.csv\"),\n    TIME_SERIES_MONTHLY: require(\"./AMZN/monthly.csv\"),\n  },\n  AAPL: {\n    TIME_SERIES_INTRADAY_EXTENDED: require(\"./AAPL/intraday.csv\"),\n    TIME_SERIES_WEEKLY: require(\"./AAPL/weekly.csv\"),\n    TIME_SERIES_MONTHLY: require(\"./AAPL/monthly.csv\"),\n  },\n  FB: {\n    TIME_SERIES_INTRADAY_EXTENDED: require(\"./FB/intraday.csv\"),\n    TIME_SERIES_WEEKLY: require(\"./FB/weekly.csv\"),\n    TIME_SERIES_MONTHLY: require(\"./FB/monthly.csv\"),\n  },\n  MSFT: {\n    TIME_SERIES_INTRADAY_EXTENDED: require(\"./MSFT/intraday.csv\"),\n    TIME_SERIES_WEEKLY: require(\"./MSFT/weekly.csv\"),\n    TIME_SERIES_MONTHLY: require(\"./MSFT/monthly.csv\"),\n  },\n  TSLA: {\n    TIME_SERIES_INTRADAY_EXTENDED: require(\"./TSLA/intraday.csv\"),\n    TIME_SERIES_WEEKLY: require(\"./TSLA/weekly.csv\"),\n    TIME_SERIES_MONTHLY: require(\"./TSLA/monthly.csv\"),\n  },\n};\n\nexport type DemoType = \"AMZN\" | \"AAPL\" | \"TSLA\" | \"FB\" | \"MSFT\";\n\n// To fake request loading time\nexport function sleep(delay = 0) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport default demoData;\n","enum DataTimePeriod {\n  INTRADAY = \"Time Series (5min)\",\n  DAILY = \"Time Series (Daily)\",\n  WEEKLY = \"Weekly Time Series\",\n  MONTHLY = \"Monthly Time Series\",\n}\n\nenum DisplayTimePeriod {\n  DAY = \"1D\",\n  WEEK = \"1W\",\n  MONTH = \"1M\",\n  ONE_YEAR = \"1Y\",\n  FIVE_YEARS = \"5Y\",\n  MAX = \"MAX\",\n}\n\nexport { DataTimePeriod, DisplayTimePeriod };\n","export const getStockQuery = () => \"https://www.alphavantage.co/query\";\n\nexport enum functionType {\n  TIME_SERIES_INTRADAY_EXTENDED = \"TIME_SERIES_INTRADAY_EXTENDED\",\n  TIME_SERIES_MONTHLY = \"TIME_SERIES_MONTHLY\",\n  TIME_SERIES_WEEKLY = \"TIME_SERIES_WEEKLY\",\n}\n","export const getStockQuote = () =>\n  \"https://financialmodelingprep.com/api/v3/search\";\n","import ChartData from \"../../models/ChartData\";\nimport StockInfo from \"../../models/StockInfo\";\nimport { DisplayTimePeriod } from \"../../models/TimePeriod\";\n\nexport interface StockChartState {\n  intraDayChartData?: ChartData[];\n  weeklyChartData?: ChartData[];\n  monthlyChartData?: ChartData[];\n  timePeriod: DisplayTimePeriod;\n  stockInfo?: StockInfo;\n}\n\ntype ActionMap<M extends { [index: string]: any }> = {\n  [Key in keyof M]: M[Key] extends undefined\n    ? {\n        type: Key;\n      }\n    : {\n        type: Key;\n        payload: M[Key];\n      };\n};\n\nexport enum Types {\n  SetStock = \"SET_STOCK\",\n  SetTimePeriod = \"SET_TIME_PERIOD\",\n  SetIntraDayChartData = \"SET_INTRADAY_CHART_DATA\",\n  SetWeeklyChartData = \"SET_WEEKLY_CHART_DATA\",\n  SetMonthlyChartData = \"SET_MONTHLY_CHART_DATA\",\n}\n\ntype StockChartContextPayload = {\n  [Types.SetStock]: StockInfo | undefined;\n  [Types.SetTimePeriod]: DisplayTimePeriod;\n  [Types.SetIntraDayChartData]: ChartData[] | undefined;\n  [Types.SetWeeklyChartData]: ChartData[] | undefined;\n  [Types.SetMonthlyChartData]: ChartData[] | undefined;\n};\n\nexport type StockChartContextActions = ActionMap<StockChartContextPayload>[keyof ActionMap<StockChartContextPayload>];\n\nexport const stockChartContextReducer = (\n  state: StockChartState,\n  action: StockChartContextActions\n): StockChartState => {\n  switch (action.type) {\n    case Types.SetStock:\n      return {\n        ...state,\n        stockInfo: action.payload || undefined,\n        monthlyChartData: undefined,\n        weeklyChartData: undefined,\n        intraDayChartData: undefined,\n        timePeriod: DisplayTimePeriod.DAY,\n      };\n    case Types.SetTimePeriod:\n      return { ...state, timePeriod: action.payload };\n    case Types.SetIntraDayChartData:\n      return { ...state, intraDayChartData: action.payload };\n    case Types.SetWeeklyChartData:\n      return { ...state, weeklyChartData: action.payload };\n    case Types.SetMonthlyChartData:\n      return { ...state, monthlyChartData: action.payload };\n    default:\n      return state;\n  }\n};\n","import Axios from \"axios\";\nimport Papa from \"papaparse\";\nimport { functionType, getStockQuery } from \"../../api/alphaVantage\";\nimport { getStockQuote } from \"../../api/financialModelingPrep\";\nimport {\n  ALPHA_VANTAGE_API_KEY,\n  FINANCIAL_MODELING_PREP_API_KEY,\n  usingFakeData,\n} from \"../../config\";\nimport demoSymbols from \"../../demoData/demoSymbols.json\";\nimport ChartData from \"../../models/ChartData\";\nimport SymbolDataDto from \"../../models/SymbolDataDto\";\nimport { DisplayTimePeriod } from \"../../models/TimePeriod\";\nimport demoData, { DemoType } from \"../../demoData/demoData\";\n\nconst callFunction: Record<DisplayTimePeriod, functionType> = {\n  [DisplayTimePeriod.DAY]: functionType.TIME_SERIES_INTRADAY_EXTENDED,\n  [DisplayTimePeriod.WEEK]: functionType.TIME_SERIES_INTRADAY_EXTENDED,\n  [DisplayTimePeriod.MONTH]: functionType.TIME_SERIES_INTRADAY_EXTENDED,\n  [DisplayTimePeriod.ONE_YEAR]: functionType.TIME_SERIES_WEEKLY,\n  [DisplayTimePeriod.FIVE_YEARS]: functionType.TIME_SERIES_MONTHLY,\n  [DisplayTimePeriod.MAX]: functionType.TIME_SERIES_MONTHLY,\n};\n\nconst parseCsvResults = (results: Papa.ParseResult<any[]>): any[] => {\n  let parsedData: any[] = [];\n  // Remove first row, because it contains the csv header info and filter out empty data rows\n  const csvData = results.data\n    .slice(1)\n    .filter((e) => e[0].length > 0 && !isNaN(e[4]));\n  if (csvData.length > 1) {\n    parsedData = csvData\n      ? csvData.map(\n          (row): ChartData => {\n            return {\n              date: row[0],\n              open: parseFloat(row[1]),\n              high: parseFloat(row[2]),\n              low: parseFloat(row[3]),\n              close: parseFloat(row[4]),\n              volume: parseFloat(row[5]),\n            };\n          }\n        )\n      : [];\n  }\n  return parsedData;\n};\n\nasync function fetchCsv(url: string) {\n  return fetch(url).then(function (response) {\n    let reader = response.body && response.body.getReader();\n    let decoder = new TextDecoder(\"utf-8\");\n\n    return (\n      reader &&\n      reader.read().then(function (result) {\n        return decoder.decode(result.value);\n      })\n    );\n  });\n}\n\nexport async function getStockDataBySymbol(\n  symbol: string,\n  time: DisplayTimePeriod\n): Promise<ChartData[]> {\n  let parsedData: ChartData[] | undefined;\n  const currentFunctionType = callFunction[time];\n\n  const basicCallParams = {\n    function: currentFunctionType,\n    symbol,\n    datatype: \"csv\",\n    apikey: ALPHA_VANTAGE_API_KEY,\n  };\n\n  const intradayParams =\n    currentFunctionType === functionType.TIME_SERIES_INTRADAY_EXTENDED\n      ? {\n          interval: \"15min\",\n          slice: \"year1month1\",\n        }\n      : {};\n\n  const callParams = { ...basicCallParams, ...intradayParams };\n\n  try {\n    let rawCsv;\n    if (!usingFakeData) {\n      rawCsv = await Axios.get(getStockQuery(), {\n        params: callParams,\n      });\n    } else {\n      const localCsvData = await fetchCsv(\n        demoData[symbol as DemoType][currentFunctionType].default\n      );\n      rawCsv = {\n        data: localCsvData,\n      };\n    }\n    Papa.parse<any[]>(rawCsv.data, {\n      download: false,\n      delimiter: \",\",\n      complete: (results) => {\n        parsedData = parseCsvResults(results);\n      },\n    });\n    return parsedData && parsedData?.length > 0 ? parsedData.reverse() : [];\n  } catch (error) {\n    console.warn(\"Error retrieving stock data\", error);\n    return [];\n  }\n}\n\nexport async function getStockSymbol(\n  query: string\n): Promise<SymbolDataDto[] | undefined> {\n  try {\n    if (!usingFakeData) {\n      const { data } = await Axios.get(getStockQuote(), {\n        params: {\n          query,\n          limit: \"10\",\n          exchange: \"NASDAQ\",\n          apikey: FINANCIAL_MODELING_PREP_API_KEY,\n        },\n      });\n      return data;\n    } else {\n      return demoSymbols;\n    }\n  } catch (error) {\n    console.warn(\"Error retrieving stock symbol\", error);\n    return undefined;\n  }\n}\n","import React, { Dispatch, FC } from \"react\";\nimport { DisplayTimePeriod } from \"../../models/TimePeriod\";\nimport {\n  StockChartContextActions,\n  stockChartContextReducer,\n  StockChartState,\n} from \"./StockChartReducer\";\n\nexport const defaultState: StockChartState = {\n  // stockInfo: { symbol: \"IBM\", name: \"\", exchange: \"\" },\n  stockInfo: undefined,\n  intraDayChartData: undefined,\n  weeklyChartData: undefined,\n  monthlyChartData: undefined,\n  timePeriod: DisplayTimePeriod.DAY,\n};\n\nexport const StockChartContext = React.createContext<StockChartState>(\n  defaultState\n);\nconst StockDispatchContext = React.createContext<\n  Dispatch<StockChartContextActions> | undefined\n>(undefined);\n\nconst StockChartContextProvider: FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [state, dispatch] = React.useReducer(\n    stockChartContextReducer,\n    defaultState\n  );\n\n  return (\n    <StockChartContext.Provider value={state}>\n      <StockDispatchContext.Provider value={dispatch}>\n        {children}\n      </StockDispatchContext.Provider>\n    </StockChartContext.Provider>\n  );\n};\n\nexport function useStockChartState() {\n  const context = React.useContext(StockChartContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useStockChartState must be used within a StockChartProvider\"\n    );\n  }\n  return context;\n}\nexport function useStockChartDispatch() {\n  const context = React.useContext(StockDispatchContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useStockChartDispatch must be used within a StockChartProvider\"\n    );\n  }\n  return context;\n}\n\nexport default StockChartContextProvider;\n","import styled from \"styled-components\";\n\nconst StyledChart = styled.div`\n  .recharts-text {\n    fill: #9b9b9b;\n  }\n`;\n\nexport default StyledChart;\n","import dayjs from \"dayjs\";\nimport React from \"react\";\nimport {\n  Area,\n  AreaChart,\n  CartesianGrid,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport ChartData from \"../../models/ChartData\";\nimport { DisplayTimePeriod } from \"../../models/TimePeriod\";\nimport StyledChart from \"../StyledChart/StyledChart\";\n\ninterface Props {\n  stockChart: ChartData[];\n  timeFrame: DisplayTimePeriod;\n}\n\nconst monthsShort = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n];\n\nconst StockChart: React.FC<Props> = ({ stockChart, timeFrame }) => {\n  const formatter = (value: string) => {\n    const dayJsValue = dayjs(value);\n    if (timeFrame === DisplayTimePeriod.DAY) {\n      return `${dayJsValue.format(\"HH:mm\")}`;\n    } else if (\n      timeFrame === DisplayTimePeriod.WEEK ||\n      timeFrame === DisplayTimePeriod.MONTH\n    ) {\n      return `${monthsShort[dayJsValue.month()]} ${dayJsValue.date()}`;\n    }\n    return value;\n  };\n\n  return (\n    <StyledChart>\n      <AreaChart width={720} height={350} data={stockChart} baseValue=\"dataMin\">\n        <defs>\n          <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#2b9640\" stopOpacity={0.8} />\n            <stop offset=\"95%\" stopColor=\"#2b9640\" stopOpacity={0} />\n          </linearGradient>\n        </defs>\n        <CartesianGrid strokeDasharray=\"5 5\" opacity=\"0.2\" />\n        <Tooltip\n          contentStyle={{\n            background: \"rgba(24, 24, 24, 0.95)\",\n            borderColor: \"#111\",\n          }}\n          labelStyle={{ color: \"#d2d2d2\" }}\n          formatter={(value) => [value, \"Close\"]}\n        />\n        <XAxis\n          dataKey=\"date\"\n          tickFormatter={formatter}\n          allowDuplicatedCategory={false}\n          interval={\"preserveStart\"}\n          minTickGap={50}\n          tickSize={0}\n          tickMargin={15}\n          height={40}\n        />\n        <YAxis\n          tickMargin={15}\n          tickSize={0}\n          orientation=\"right\"\n          tickFormatter={(value) => value.toFixed(2)}\n          domain={[\n            (dataMin) => dataMin - dataMin * 0.1,\n            (dataMax) => dataMax + dataMax * 0.1,\n          ]}\n        />\n        <Area\n          type=\"monotone\"\n          dataKey=\"close\"\n          strokeWidth=\"2\"\n          stroke=\"#0dba2f\"\n          fill=\"url(#colorUv)\"\n        />\n      </AreaChart>\n    </StyledChart>\n  );\n};\n\nexport default StockChart;\n","import { lightBlue } from \"@material-ui/core/colors\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport React from \"react\";\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: lightBlue[50],\n    },\n  },\n});\n\nconst MaterialThemeProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n\nexport default MaterialThemeProvider;\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\nimport React from \"react\";\nimport { DisplayTimePeriod } from \"../../models/TimePeriod\";\nimport {\n  useStockChartDispatch,\n  useStockChartState,\n} from \"../context/StockChartContext\";\nimport { Types } from \"../context/StockChartReducer\";\nimport MaterialThemeProvider from \"../MaterialThemeProvider/MaterialThemeProvider\";\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    height: 34,\n    padding: \"6px 12px\",\n    marginRight: \"38px\",\n  },\n}));\n\nconst StockTimePeriodToggler = () => {\n  const { timePeriod } = useStockChartState();\n  const classes = useStyles();\n  const dispatch = useStockChartDispatch();\n  const changeTimePeriod = (newTimePeriod: DisplayTimePeriod) =>\n    dispatch({ type: Types.SetTimePeriod, payload: newTimePeriod });\n  return (\n    <MaterialThemeProvider>\n      <ToggleButtonGroup\n        className={classes.root}\n        value={timePeriod}\n        exclusive\n        onChange={(_event, value) => changeTimePeriod(value)}\n      >\n        {Object.values(DisplayTimePeriod).map((timePeriod, i) => (\n          <ToggleButton key={i} value={timePeriod}>\n            {timePeriod}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    </MaterialThemeProvider>\n  );\n};\n\nexport default StockTimePeriodToggler;\n","import { CircularProgress } from \"@material-ui/core\";\nimport dayjs from \"dayjs\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { usingFakeData } from \"../../config\";\nimport { sleep } from \"../../demoData/demoData\";\nimport ChartData from \"../../models/ChartData\";\nimport { DisplayTimePeriod } from \"../../models/TimePeriod\";\nimport { getStockDataBySymbol } from \"../../service/StockService/StockService\";\nimport {\n  useStockChartDispatch,\n  useStockChartState,\n} from \"../context/StockChartContext\";\nimport { Types } from \"../context/StockChartReducer\";\nimport StockChart from \"../StockChart/StockChart\";\nimport StockTimePeriodToggler from \"../StockTimePeriodToggler/StockTimePeriodToggler\";\n\nconst StockLayout = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  max-width: 720px;\n  width: 100%;\n  padding: 3rem;\n  position: relative;\n  .MuiCircularProgress-colorPrimary {\n    color: #ababab;\n  }\n  .MuiCircularProgress-root {\n    text-align: center;\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 200px;\n    margin: auto;\n  }\n`;\n\nconst NoResultsFound = styled.div`\n  position: absolute;\n  text-align: center;\n  color: #ababab;\n  left: 0;\n  right: 0;\n  top: 200px;\n  margin: auto;\n`;\n\nconst StockHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 24px;\n`;\nconst StockInfo = styled.div`\n  color: #fff;\n  display: flex;\n  align-items: center;\n  .symbol {\n    font-size: 38px;\n  }\n  .additionalInfo {\n    font-size: 12px;\n    margin-left: 12px;\n    line-height: 16px;\n    color: #ababab;\n  }\n`;\n\n/**\n * If we are using fake data, the charts will display\n * with a status as of December 20, 2020\n **/\nconst referenceDate = usingFakeData\n  ? dayjs(new Date(2020, 11, 20)).toDate()\n  : dayjs().toDate();\n\nconst today = referenceDate;\nconst week = dayjs(referenceDate).subtract(7, \"day\").toDate();\nconst month = dayjs(referenceDate).subtract(30, \"day\").toDate();\nconst year = dayjs(referenceDate).subtract(1, \"year\").toDate();\nconst five_years = dayjs(referenceDate).subtract(5, \"year\").toDate();\n\nconst Stock = () => {\n  const {\n    timePeriod,\n    stockInfo,\n    intraDayChartData,\n    weeklyChartData,\n    monthlyChartData,\n  } = useStockChartState();\n  const dispatch = useStockChartDispatch();\n  const symbol = stockInfo?.symbol ?? undefined;\n  const [loading, setLoading] = useState(false);\n\n  const currenChartSettings: Record<\n    DisplayTimePeriod,\n    { chartData: ChartData[] | undefined; targetDate?: Date }\n  > = React.useMemo(\n    () => ({\n      [DisplayTimePeriod.DAY]: {\n        chartData: intraDayChartData,\n        targetDate: today,\n      },\n      [DisplayTimePeriod.WEEK]: {\n        chartData: intraDayChartData,\n        targetDate: week,\n      },\n      [DisplayTimePeriod.MONTH]: {\n        chartData: intraDayChartData,\n        targetDate: month,\n      },\n      [DisplayTimePeriod.ONE_YEAR]: {\n        chartData: weeklyChartData,\n        targetDate: year,\n      },\n      [DisplayTimePeriod.FIVE_YEARS]: {\n        chartData: monthlyChartData,\n        targetDate: five_years,\n      },\n      [DisplayTimePeriod.MAX]: {\n        chartData: monthlyChartData,\n        targetDate: undefined,\n      },\n    }),\n    [intraDayChartData, monthlyChartData, weeklyChartData]\n  );\n  const currentSettings = currenChartSettings[timePeriod];\n\n  useEffect(() => {\n    async function getStockData(symbol: string) {\n      setLoading(true);\n      const stockData = await getStockDataBySymbol(symbol, timePeriod);\n      if (usingFakeData) {\n        await sleep(1000);\n      }\n      let typeForDispatch = Types.SetIntraDayChartData;\n\n      if (timePeriod === DisplayTimePeriod.ONE_YEAR) {\n        typeForDispatch = Types.SetWeeklyChartData;\n      } else if (\n        timePeriod === DisplayTimePeriod.FIVE_YEARS ||\n        timePeriod === DisplayTimePeriod.MAX\n      ) {\n        typeForDispatch = Types.SetMonthlyChartData;\n      }\n\n      dispatch({\n        type: typeForDispatch,\n        payload: stockData,\n      });\n      setLoading(false);\n    }\n    if (currenChartSettings[timePeriod].chartData || loading) {\n      return;\n    }\n    symbol && getStockData(symbol);\n  }, [\n    symbol,\n    monthlyChartData,\n    weeklyChartData,\n    intraDayChartData,\n    loading,\n    dispatch,\n    timePeriod,\n    currenChartSettings,\n  ]);\n\n  const trimData = (data: ChartData[]) => {\n    if (timePeriod === DisplayTimePeriod.DAY) {\n      return data.filter(\n        (e) =>\n          new Date(e.date).getDate() ===\n          new Date(data[data.length - 1].date).getDate()\n      );\n    }\n    return data.filter((e) =>\n      currentSettings.targetDate !== undefined\n        ? new Date(e.date) > currentSettings.targetDate\n        : true\n    );\n  };\n  return symbol ? (\n    <StockLayout>\n      <>\n        <StockHeader>\n          <StockInfo>\n            <div className=\"symbol\">{symbol}</div>\n            <div className=\"additionalInfo\">\n              <div className=\"fullName\">{stockInfo?.name}</div>\n              <div className=\"metaInfo\">{`${stockInfo?.exchange} | ${stockInfo?.currency}`}</div>\n            </div>\n          </StockInfo>\n          <StockTimePeriodToggler />\n        </StockHeader>\n        {loading ? (\n          <CircularProgress color=\"primary\" />\n        ) : !currentSettings.chartData ||\n          currentSettings.chartData.length === 0 ? (\n          <NoResultsFound>No results found.</NoResultsFound>\n        ) : (\n          <StockChart\n            stockChart={trimData(currentSettings.chartData) || []}\n            timeFrame={timePeriod}\n          />\n        )}\n      </>\n    </StockLayout>\n  ) : null;\n};\n\nexport default Stock;\n","import StockInfo from \"../models/StockInfo\";\nimport SymbolDataDto from \"../models/SymbolDataDto\";\n\nexport const mapSymbolDataToStockInfo = (data: SymbolDataDto): StockInfo => ({\n  exchange: data.exchangeShortName,\n  name: data.name,\n  symbol: data.symbol,\n  currency: data.currency ?? undefined,\n});\n","import { List, ListItem, ListItemText } from \"@material-ui/core\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { usingFakeData } from \"../../config\";\nimport { sleep } from \"../../demoData/demoData\";\nimport useDebounce from \"../../hooks/useDebounce\";\nimport { mapSymbolDataToStockInfo } from \"../../mappers/SymbolDataDtoMapper\";\nimport SymbolData from \"../../models/SymbolDataDto\";\nimport { getStockSymbol } from \"../../service/StockService/StockService\";\nimport {\n  useStockChartDispatch,\n  useStockChartState,\n} from \"../context/StockChartContext\";\nimport { Types } from \"../context/StockChartReducer\";\nimport MaterialThemeProvider from \"../MaterialThemeProvider/MaterialThemeProvider\";\n\nconst SymbolSearchBarWrapper = styled.div`\n  width: 200px;\n`;\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    width: 200,\n    overflow: \"auto\",\n    maxHeight: 500,\n    color: \"white\",\n    position: \"absolute\",\n    zIndex: 10,\n    background: \"rgba(31, 31, 31, 0.95)\",\n    borderBottomLeftRadius: \"10px\",\n    borderBottomRightRadius: \"10px\",\n    \"& .MuiListItemText-secondary\": {\n      fontSize: \"12px\",\n    },\n  },\n}));\n\nconst SymbolSearchBar = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [results, setResults] = useState<SymbolData[]>([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\n  const classes = useStyles();\n\n  const { stockInfo } = useStockChartState();\n  const symbol = stockInfo?.symbol ?? \"\";\n  const dispatch = useStockChartDispatch();\n\n  const setStockSymbol = (newSymbol: SymbolData) => {\n    setResults([]);\n    setSearchTerm(newSymbol.symbol);\n    dispatch({\n      type: Types.SetStock,\n      payload: mapSymbolDataToStockInfo(newSymbol),\n    });\n  };\n\n  useEffect(() => {\n    async function searchSymbols() {\n      setIsSearching(true);\n      const results = await getStockSymbol(debouncedSearchTerm);\n      if (usingFakeData) {\n        await sleep(1000);\n      }\n      setIsSearching(false);\n      setResults(results || []);\n    }\n    if (\n      debouncedSearchTerm &&\n      debouncedSearchTerm !== symbol &&\n      searchTerm !== symbol\n    ) {\n      searchSymbols();\n    } else {\n      setResults([]);\n    }\n  }, [debouncedSearchTerm, symbol, searchTerm]);\n  return (\n    <SymbolSearchBarWrapper>\n      <MaterialThemeProvider>\n        <TextField\n          label=\"Symbol\"\n          fullWidth={true}\n          placeholder=\"Search for a symbol...\"\n          variant=\"outlined\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          InputLabelProps={{\n            shrink: true,\n          }}\n          InputProps={{\n            endAdornment: (\n              <>\n                {isSearching ? (\n                  <CircularProgress color=\"inherit\" size={20} />\n                ) : null}\n              </>\n            ),\n          }}\n        />\n        {results.length ? (\n          <List className={classes.root} component=\"nav\">\n            {results.map((result, i) => (\n              <ListItem key={i} button onClick={() => setStockSymbol(result)}>\n                <ListItemText\n                  primary={result.symbol}\n                  secondary={`${result.exchangeShortName} ${\n                    result.currency ? `| ${result.currency}` : \"\"\n                  }`}\n                />\n              </ListItem>\n            ))}\n          </List>\n        ) : null}\n      </MaterialThemeProvider>\n    </SymbolSearchBarWrapper>\n  );\n};\n\nexport default SymbolSearchBar;\n","import { useEffect, useState } from \"react\";\n\n// Our hook\nexport default function useDebounce(value: string, delay: number) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      // Set debouncedValue to value (passed in) after the specified delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Return a cleanup function that will be called every time ...\n      // ... useEffect is re-called. useEffect will only be re-called ...\n      // ... if value changes (see the inputs array below).\n      // This is how we prevent debouncedValue from changing if value is ...\n      // ... changed within the delay period. Timeout gets cleared and restarted.\n      // To put it in context, if the user is typing within our app's ...\n      // ... search box, we don't want the debouncedValue to update until ...\n      // ... they've stopped typing for more than 500ms.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    // Only re-call effect if value changes\n    // You could also add the \"delay\" var to inputs array if you ...\n    // ... need to be able to change that dynamically.\n    [value, delay]\n  );\n\n  return debouncedValue;\n}\n","import React from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport Layout from \"./components/Layout\";\nimport Stock from \"./components/Stock\";\nimport StockChartContextProvider from \"./components/context/StockChartContext\";\nimport SymbolSearchBar from \"./components/SymbolSearchBar\";\nimport { usingFakeData } from \"./config\";\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;600;800&display=swap');\n  body {\n    font-family:\"Kanit\", sans-serif;\n    background: #242424;\n    height:100vh;\n  }\n`;\n\nconst DemoDisclaimer = styled.span`\n  color: #b54444;\n  margin-top: 12px;\n  margin-left: 12px;\n  font-size: 12px;\n`;\n\nconst App = () => (\n  <>\n    {usingFakeData ? (\n      <DemoDisclaimer>No API key provided. Using demo data.</DemoDisclaimer>\n    ) : null}\n    <Layout>\n      <StockChartContextProvider>\n        <SymbolSearchBar />\n        <Stock />\n      </StockChartContextProvider>\n    </Layout>\n    <GlobalStyle />\n  </>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}